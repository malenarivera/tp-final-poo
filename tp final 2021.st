SimpleButtonMorph subclass: #BotonAccion	instanceVariableNames: 'bloque bloqueAccion'	classVariableNames: ''	package: 'tp final 2021'!!BotonAccion methodsFor: 'initialization' stamp: 'dasda 1/22/2022 13:12'!mouseAction: unBloquebloqueAccion := unBloque.! !!BotonAccion methodsFor: 'initialization' stamp: 'dasda 1/22/2022 13:12'!mouseUp: unEventosuper mouseUp: unEvento.bloqueAccion value.! !Object subclass: #GestorTrabajo	instanceVariableNames: 'colPostulantes colEmpresaSolicitante colPropuestas colSolicitudesResueltas'	classVariableNames: ''	package: 'tp final 2021'!!GestorTrabajo methodsFor: 'as yet unclassified' stamp: 'Malena 12/11/2022 16:07'!getColPropuestas^colPropuestas.! !!GestorTrabajo methodsFor: 'as yet unclassified'!mostrarVerificarFraude:col|aux pos|aux:=1.pos := ''.col  do: [ :unaSol | 	pos := pos,'Solicitud en fraude ', aux asString, '<n>' expandMacros.	aux := aux+1.	pos := pos, (unaSol  obtenerDatosSolicitud), '<n><n>'expandMacros].^pos.! !!GestorTrabajo methodsFor: 'as yet unclassified' stamp: 'Malena 12/7/2022 17:43'!getSolicitudesResueltas^colSolicitudesResueltas.! !!GestorTrabajo methodsFor: 'as yet unclassified' stamp: 'Malena 12/8/2022 19:36'!iniciarDiacolEmpresaSolicitante do:[:unaEmpresaSol | unaEmpresaSol actualizarVigencia.]! !!GestorTrabajo methodsFor: 'as yet unclassified' stamp: 'malenarivera 3/7/2022 23:49'!agregarEmpresaSolicitante: unaEmpcolEmpresaSolicitante add:unaEmp.self changed.! !!GestorTrabajo methodsFor: 'as yet unclassified' stamp: 'Malena 12/22/2022 16:15'!mostrarPropuestasGeneradas|aux pos|aux:=1.pos := ''.colPropuestas  do: [ :unaP | 	pos := pos,'PROPUESTA GENERADA ', aux asString, '<n>' expandMacros.	aux := aux+1.	pos := pos, (unaP  obtenerDatosPropuesta), '<n>'expandMacros].^pos.! !!GestorTrabajo methodsFor: 'as yet unclassified' stamp: 'Malena 12/27/2022 01:35'!getEmpresaSolicitantes^colEmpresaSolicitante.! !!GestorTrabajo methodsFor: 'as yet unclassified' stamp: 'Malena 12/12/2022 18:29'!ordenarEmpresasSolicitudes^colEmpresaSolicitante asSortedCollection: [ :unaEmp :otraEmp | ((self ordenarEmpresasSolicitudesPrivado:unaEmp)>=(self ordenarEmpresasSolicitudesPrivado:otraEmp))].! !!GestorTrabajo methodsFor: 'as yet unclassified' stamp: 'Malena 12/23/2022 00:49'!aceptarPropuestas|postu nuevaColPropuestas|nuevaColPropuestas:= colPropuestas allButFirst.nuevaColPropuestas do: [ :unaPropuesta|	(postu:= (colPostulantes detect: [:unPos | unPos verificarPostulante: (unaPropuesta getSolicitud)] ifNone: [colPropuestas remove:unaPropuesta. nil])).		"SI ENCONTRO EL POSTULANTE ENTONCES SETEA Y HACE TODO EL RESTO. SI NO LO ENCONTRO ENTONCES PASA A LA OTRA PROPUESTA "		(postu) ifNotNil:[unaPropuesta setPostulante:(postu). self agregarSolicitudResuelta: (unaPropuesta getSolicitud). (unaPropuesta getSolicitud) setEstaVigente.].].! !!GestorTrabajo methodsFor: 'as yet unclassified' stamp: 'Malena 12/22/2022 20:39'!generarPropuestascolEmpresaSolicitante do: [ :unaEmpresa | ((unaEmpresa getSolicitudesPendientes) do: [ :unaSol | colPropuestas add: (Propuesta crearPropuestaConSolicitud: unaSol)])].self changed.! !!GestorTrabajo methodsFor: 'as yet unclassified' stamp: 'malenarivera 3/7/2022 23:49'!agregarPostulante: unPoscolPostulantes add:unPos.self changed.! !!GestorTrabajo methodsFor: 'as yet unclassified' stamp: 'Malena 12/20/2022 20:40'!mostrarPropuestasAceptadas|aux prop|aux:=1.prop := ''.colPropuestas  do: [ :unaP | 	(unaP getEsInvalida) ifFalse:[prop := prop ,'PROPUESTA ACEPTADA ', aux asString, '<n>' expandMacros.	prop := prop, (unaP  obtenerDatosPropuesta), '<n>'expandMacros]. aux:= aux+1].^prop.! !!GestorTrabajo methodsFor: 'as yet unclassified' stamp: 'Malena 12/12/2022 17:11'!getSolicitudesFechaDada: aDate|col|col:= OrderedCollection new.colEmpresaSolicitante do: [ :unaEmpresa| col addAll: (unaEmpresa colPendientesFecha: aDate) ].^col.! !!GestorTrabajo methodsFor: 'as yet unclassified' stamp: 'Malena 12/15/2022 02:59'!verSolFecha:fechita|col todasSolicitudes|todasSolicitudes:=''.col:= self getSolicitudesFechaDada: fechita.col do: [ :unaSol | todasSolicitudes:= todasSolicitudes , unaSol obtenerDatosSolicitud, '<n>' expandMacros].^todasSolicitudes.! !!GestorTrabajo methodsFor: 'as yet unclassified' stamp: 'Malena 12/15/2022 02:25'!verPostulante|pos|pos:= (colPostulantes last)  obtenerDatosPostulante.^pos.! !!GestorTrabajo methodsFor: 'as yet unclassified'!getEmpresaSolicitantesConNombre^colEmpresaSolicitante collect:[:unaEmpresa| unaEmpresa getNombre].! !!GestorTrabajo methodsFor: 'as yet unclassified' stamp: 'Malena 12/12/2022 18:28'!ordenarEmpresasSolicitudesPrivado:unaEmp|cant|cant:=0.colSolicitudesResueltas do: [:unaSolResuelta | ((unaEmp getColSolicitudes includes: unaSolResuelta) ifTrue: (cant+1))].^cant.! !!GestorTrabajo methodsFor: 'as yet unclassified' stamp: 'Malena 12/22/2022 16:00'!obtenerVerificarFraude|col|colEmpresaSolicitante do: [ :unaEmp| col:= ((unaEmp getColSolicitudes) do: [ :unaSol | unaSol verificar: unaEmp yColPropuestas:(colPropuestas)])].^col.! !!GestorTrabajo methodsFor: 'as yet unclassified' stamp: 'Malena 12/27/2022 01:50'!cargarDatos|persona1 persona3 persona4  emp1 emp2 emp3 empSol1 empSol2 empSol3 empSol4 solicitud1 solicitud2 solicitud3 solicitud4 propuesta1|persona1:= Persona crearNombre: 'Susana Gimenez' yAptitudes:(#('Mecanica' 'Informatica' 'Arquitectura')asOrderedCollection).self agregarPostulante: persona1.persona3:= Persona crearNombre: 'Cristian Romero' yAptitudes:(#('Informatica' 'Ingenieria')asOrderedCollection).self agregarPostulante: persona3.persona4:= Persona crearNombre: 'Min Yoongi' yAptitudes:(#('Docencia' 'Informatica')asOrderedCollection).self agregarPostulante: persona4.emp1:= Empresa crearRubro: 'Medicina' Tipo:'Uniforme'  Puntos:4  infoVenta:''  yNombre:'Empresa de Medicina'.  self agregarPostulante: emp1.emp2:= Empresa crearRubro: 'Abogacia' Tipo:'Puntual'  Puntos:3  infoVenta:''  yNombre:'Empresa de Abogacia'.self agregarPostulante: emp2.emp3:= Empresa crearRubro: 'Ingenieria' Tipo:'Uniforme'  Puntos:1  infoVenta:''  yNombre:'Empresa de Ingenieria'.self agregarPostulante: emp3. empSol1 := EmpresaSolicitante crearRubro: 'Informatica' Tipo:'Uniforme'  Puntos:2  infoVenta:''  yNombre: 'Empresa de Informatica'.self agregarEmpresaSolicitante: empSol1.empSol2:= EmpresaSolicitante crearRubro: 'Kinesiologia' Tipo:'Puntual'  Puntos:2  infoVenta:''  yNombre: 'Empresa de Kinesiologia'.self agregarEmpresaSolicitante: empSol2.empSol3 := Combinada crearRubro: 'Pasteleria' Tipo:nil  Puntos:2  infoVenta:'Pasteles'  yNombre:'Empresa Combinada de Pasteleria'. self agregarEmpresaSolicitante: empSol3.empSol4:= Combinada crearRubro: 'Danza' Tipo:nil  Puntos:3  infoVenta:'Clases de Danza'  yNombre:'Empresa Combinada de Danza'. self agregarEmpresaSolicitante: empSol4.solicitud1 := Servicio crearDescripcion: 'Informatica' nroId:1  unMonto:200  EsPuntual:true  yFechaVal: (Date newDay: 2 month:2  year:2023 ).solicitud1 setFechaEmision: (Date newDay: 10 month:9  year:2021 ).empSol1 agregarSolicitud: solicitud1.solicitud2:= Trabajo crearDescripcion: 'Kinesiologia' NroId:2  yFechaVal:(Date newDay: 25 month:1  year:2023) .solicitud2 setFechaEmision: (Date newDay: 1 month:2  year:2021 ).empSol2 agregarSolicitud: solicitud2.solicitud3 := Servicio crearDescripcion: 'Ingenieria' nroId:3 unMonto:100 EsPuntual: true yFechaVal:(Date newDay: 11 month: 2 year:2023).solicitud3 setFechaEmision: (Date newDay: 18 month:12  year:2022 ).empSol4 agregarSolicitud: solicitud3.solicitud4:= Trabajo crearDescripcion: 'Abogacia' NroId:4  yFechaVal:(Date newDay: 7 month:3  year:2018).solicitud4 setFechaEmision: (Date newDay: 5 month:3  year: 2018).empSol3 agregarSolicitud: solicitud4.propuesta1:= Propuesta crearPropuestaConPostulante: empSol4  YSolicitud: solicitud3.(propuesta1 getSolicitud) setEstaVigente.self agregarSolicitudResuelta: (propuesta1 getSolicitud). colPropuestas add:propuesta1. ! !!GestorTrabajo methodsFor: 'as yet unclassified' stamp: 'Malena 12/23/2022 00:49'!agregarSolicitudResuelta: unaSolicitudResueltacolSolicitudesResueltas add: unaSolicitudResuelta.! !!GestorTrabajo methodsFor: 'as yet unclassified' stamp: 'Malena 12/15/2022 02:25'!verEmpresaSol|pos|pos:= (colEmpresaSolicitante last)  obtenerDatosEmpresaSol.^pos.! !!GestorTrabajo methodsFor: 'as yet unclassified' stamp: 'Malena 12/22/2022 15:05'!getColAtentidas|aux pos|aux:=1.pos:=''.colSolicitudesResueltas do:[:unaSol| 	pos := pos,'Solicitud Atendida ', aux asString, '<n>' expandMacros.	aux := aux+1.	pos := pos, (unaSol  obtenerDatosSolicitud), '<n>'expandMacros].^pos.! !!GestorTrabajo methodsFor: 'as yet unclassified' stamp: 'Malena 12/22/2022 14:39'!mostrarEmpresasOrdenadas|col aux pos|col:= self ordenarEmpresasSolicitudes.pos:=''.aux:=1.col do:[:unaEmp |	pos := pos,'EMPRESA SOLICITANTE ', aux asString, '<n>' expandMacros.	aux := aux+1.	pos := pos, (unaEmp obtenerDatosEmpresaSol), '<n>'expandMacros].^pos.! !!GestorTrabajo methodsFor: 'as yet unclassified' stamp: 'malenarivera 3/10/2022 18:08'!getColPostulantes^colPostulantes.! !!GestorTrabajo methodsFor: 'Inicializador' stamp: 'Malena 12/9/2022 03:03'!inicializarGestorcolEmpresaSolicitante := OrderedCollection new.colPostulantes:= OrderedCollection new.colPropuestas:= OrderedCollection new.colSolicitudesResueltas := OrderedCollection new.self cargarDatos.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!GestorTrabajo class	instanceVariableNames: ''!!GestorTrabajo class methodsFor: 'as yet unclassified' stamp: 'malenarivera 2/27/2022 17:41'!crearGestorTrabajo|unGestor|unGestor:= self new.unGestor inicializarGestor.^unGestor.! !BorderedMorph subclass: #GestorTrabajoVisual	instanceVariableNames: 'miGestor botonCerrar botonIniciarDia botonAgregarPostulantePersona botonAgregarPostulanteEmpresa botonGenerarPropuestas botonAceptarPropuestas botonCargarSolicitud botonRevalidarSolicitud botonCargarEmpresaSolicitante botonVerificarFraude panel botonObtSolFecha text informacion tm1 tm2 origen botonSolPendientesEmpresa botonOrdenarPorCantResueltas botonSolAtendidas'	classVariableNames: ''	package: 'tp final 2021'!!GestorTrabajoVisual methodsFor: 'as yet unclassified'!ejecutarIniciarDiaEn|info fuenteRef contenido|miGestor iniciarDia.info:= 'Dia Iniciado'.fuenteRef:= (TextFontReference toFont: (StrikeFont familyName: 'Atlanta' size: 12)).contenido:= info asText addAttribute: fuenteRef.(tm2 contents: (contenido )).tm2  color: Color black.tm2  backgroundColor: ((Color lightYellow)slightlyLighter).tm2  borderColor: Color black.tm2   wrapFlag: true.tm2 width: 0.tm1 contents: '' .tm1 color: Color black.tm2 wrapFlag: true.tm2 width: 400.! !!GestorTrabajoVisual methodsFor: 'as yet unclassified'!mostrarSolicitudAgregada: soli enLaEmpresa:empresaElegida|info fuenteRef contenido|info:= soli obtenerDatosSolicitud.info:= info, 'EMPRESA ASOCIADA: ',empresaElegida getNombre.fuenteRef:= (TextFontReference toFont: (StrikeFont familyName: 'Atlanta' size: 12)).contenido:=  info asText addAttribute: fuenteRef.(tm2 contents: (contenido )).tm2  color: Color black.tm2  backgroundColor: ((Color lightYellow)slightlyLighter).tm2  borderColor: Color black.tm2   wrapFlag: true.tm2 width: 0.tm1 contents: 'ULTIMA SOLICITUD AGREGADA' .tm1 color: Color black.tm2 wrapFlag: true.tm2 width: 400.! !!GestorTrabajoVisual methodsFor: 'as yet unclassified' stamp: 'Malena 12/15/2022 00:53'!mostrarInfoPostulantes|infoPostulantes fuenteRef contenido|infoPostulantes:= miGestor verPostulante.fuenteRef:= (TextFontReference toFont: (StrikeFont familyName: 'Atlanta' size: 12)).contenido:=  infoPostulantes asText addAttribute: fuenteRef.(tm2 contents: (contenido )).tm2  color: Color black.tm2  backgroundColor: ((Color lightYellow)slightlyLighter).tm2  borderColor: Color black.tm2   wrapFlag: true.tm2 width: 0.tm1 contents: 'ULTIMO POSTULANTE AGREGADO' .tm1 color: Color black.tm2 wrapFlag: true.tm2 width: 400.! !!GestorTrabajoVisual methodsFor: 'as yet unclassified' stamp: 'Malena 12/14/2022 21:35'!ejecutarAgregarPosEmpresaEn|rubro tipo puntos infoV nombre emp|rubro:= UIManager default request: 'Ingrese el rubro de la empresa' initialAnswer: 'Un Rubro'  title: 'Crear una Empresa'.tipo:= UIManager  default request: 'INGRESE EL TIPO DE EMPRESA' initialAnswer: 'Uniforme' title: 'Crear una Empresa'.puntos:= UIManager default request: 'INGRESE LOS PUNTOS DE TRABAJO QUE TENGA LA EMPRESA' initialAnswer: 'unos Puntos' title: 'Crear una Empresa'.(tipo = 'Combinada') ifTrue: [infoV:= UIManager default request: 'Ingrese que vende la empresa' initialAnswer: 'info venta' title: 'Crear una Empresa'] ifFalse:[ infoV := '' ].nombre:= UIManager default request: 'INGRESE EL NOMBRE DE LA EMPRESA' initialAnswer: 'Empresa de ...' title: 'Crear una Empresa'.emp:= Empresa crearRubro: rubro  Tipo: tipo   Puntos: puntos infoVenta: infoV  yNombre: nombre.miGestor agregarPostulante: emp.self mostrarInfoPostulantes.! !!GestorTrabajoVisual methodsFor: 'as yet unclassified'!mostrarEmpresasEnFraude|infoEmpresas fuenteRef contenido col|col:= miGestor obtenerVerificarFraude.infoEmpresas:= miGestor mostrarVerificarFraude:col.fuenteRef:= (TextFontReference toFont: (StrikeFont familyName: 'Atlanta' size: 12)).(infoEmpresas isEmptyOrNil) ifTrue:[contenido:='NO HAY FRAUDES'] ifFalse: [contenido:= infoEmpresas asText addAttribute: fuenteRef].(tm2 contents: (contenido )).tm2  color: Color black.tm2  backgroundColor: ((Color lightYellow)slightlyLighter).tm2  borderColor: Color black.tm2   wrapFlag: true.tm2 width: 10.tm1 contents: 'OBTENER FRAUDES' .tm1 color: Color black.tm2 wrapFlag: true.tm2 width: 400.! !!GestorTrabajoVisual methodsFor: 'as yet unclassified' stamp: 'Malena 12/15/2022 02:47'!ejecutarObtSolFechaEn|unaFechaaño unaFechaMes unaFechaDia fechita|unaFechaDia:= UIManager default request: 'Por favor, ingrese un dia' initialAnswer: '1'  title: 'Buscar Solicitud segun Fecha'.unaFechaMes:= UIManager default request: 'Por favor, ingrese el digito del mes'initialAnswer: '1'  title: 'Buscar Solicitud segun Fecha'.unaFechaaño:= UIManager default request: 'Por favor, ingrese el año' initialAnswer: '2000'  title: 'Buscar Solicitud segun Fecha'.fechita:= (Date newDay: (unaFechaDia asInteger)   month: (unaFechaMes asInteger)   year: (unaFechaaño asInteger) ). self mostrarSolicitudesSegunFecha: fechita.! !!GestorTrabajoVisual methodsFor: 'as yet unclassified' stamp: 'Malena 12/15/2022 02:11'!mostrarEmpresasSolicitantes|infoEmpresas fuenteRef contenido|infoEmpresas:= miGestor verEmpresaSol.fuenteRef:= (TextFontReference toFont: (StrikeFont familyName: 'Atlanta' size: 12)).contenido:=  infoEmpresas asText addAttribute: fuenteRef.(tm2 contents: (contenido )).tm2  color: Color black.tm2  backgroundColor: ((Color lightYellow)slightlyLighter).tm2  borderColor: Color black.tm2   wrapFlag: true.tm2 width: 0.tm1 contents: 'ULTIMA EMPRESA SOLICITANTE AGREGADA' .tm1 color: Color black.tm2 wrapFlag: true.tm2 width: 400.! !!GestorTrabajoVisual methodsFor: 'as yet unclassified' stamp: 'Malena 12/27/2022 01:47'!ejecutarAgregarSolicitud|nroEmpresaElegida empresaElegida unId esTrabajo unMonto esPuntual unaFechaV unaDescripcion fechaDia fechaMes fechaAnio soli|"Primero elige la empresa"nroEmpresaElegida:= UIManager default chooseFrom: (miGestor getEmpresaSolicitantesConNombre) message:'Eliga la empresa donde se agregara la solicitud'  title:'Agregar una Solicitud'.empresaElegida:= ((miGestor getEmpresaSolicitantes)at: nroEmpresaElegida)."Ahora inserte los datos de la solicitud"unaDescripcion:= UIManager default request: 'INGRESE LA DESCRIPCION DE LA SOLICITUD' initialAnswer: 'Una Descripcion' title: 'CREAR SOLICITUD'. unId := UIManager default request: 'INGRESE EL ID DE LA SOLICITUD' initialAnswer: '10' title: 'CREAR SOLICITUD'.unId:= unId asInteger.fechaDia:= UIManager default request: 'Por favor, ingrese un dia' initialAnswer: '1'  title: 'Esto es para la fecha de Validacion de la Solicitud'.fechaMes:= UIManager default request: 'Por favor, ingrese el digito del mes'initialAnswer: '1'  title: 'Esto es para la fecha de Validacion de la Solicitud'.fechaAnio:= UIManager default request: 'Por favor, ingrese el año' initialAnswer: '2000'  title: 'Esto es para la fecha de Validacion de la Solicitud'.unaFechaV:= Date newDay: (fechaDia asInteger) month:(fechaMes asInteger)  year: (fechaAnio asInteger)."Ahora se fija si sera de trabajo o de servicio"(esTrabajo:= UIManager confirm: '¿Será una Solicitud de Trabajo?')ifTrue: [ soli:= (Trabajo crearDescripcion: unaDescripcion  NroId: unId   yFechaVal:unaFechaV)]ifFalse: [ (esPuntual:= UIManager confirm: '¿La Solicitud de Servicio sera Puntual?').			 (unMonto:= UIManager default request: 'INGRESE EL MONTO DE LA SOLICITUD' initialAnswer: 'Un Monto' title: 'CREAR SOLICITUD').			unMonto:= unMonto asInteger.			soli:= (Servicio crearDescripcion: unaDescripcion nroId:(unId)  unMonto: unMonto EsPuntual:esPuntual yFechaVal: unaFechaV)].empresaElegida agregarSolicitud: soli.self mostrarSolicitudAgregada: soli enLaEmpresa:empresaElegida.! !!GestorTrabajoVisual methodsFor: 'as yet unclassified' stamp: 'Malena 12/22/2022 14:28'!ejecutarOrdenarPorCantResueltasmiGestor ordenarEmpresasSolicitudes.self mostrarOrdenarEmpresasSolicitudes.! !!GestorTrabajoVisual methodsFor: 'as yet unclassified' stamp: 'Malena 12/22/2022 14:35'!mostrarOrdenarEmpresasSolicitudes|info fuenteRef contenido|info:= miGestor mostrarEmpresasOrdenadas.fuenteRef:= (TextFontReference toFont: (StrikeFont familyName: 'Atlanta' size: 12)).contenido:=  info asText addAttribute: fuenteRef.(tm2 contents: (contenido )).tm2  color: Color black.tm2  backgroundColor: ((Color lightYellow)slightlyLighter).tm2  borderColor: Color black.tm2   wrapFlag: true.tm2 width: 0.tm1 contents: 'EMPRESAS SOLICITANTES ORDENADAS' .tm1 color: Color black.tm2 wrapFlag: true.tm2 width: 400.! !!GestorTrabajoVisual methodsFor: 'as yet unclassified' stamp: 'Malena 12/22/2022 16:16'!mostrarGenerarPropuestas|infoPropuestas fuenteRef contenido|miGestor generarPropuestas.infoPropuestas:= miGestor mostrarPropuestasGeneradas.fuenteRef:= (TextFontReference toFont: (StrikeFont familyName: 'Atlanta' size: 12)).contenido:=  infoPropuestas  asText addAttribute: fuenteRef.contenido:= infoPropuestas asText addAttribute: fuenteRef.(tm2 contents: (contenido )).tm2  color: Color black.tm2  backgroundColor: ((Color lightYellow)slightlyLighter).tm2  borderColor: Color black.tm2   wrapFlag: true.tm2 width: 0.tm1 contents: 'PROPUESTAS GENERADAS' .tm1 color: Color black.tm2 wrapFlag: true.tm2 width: 400.! !!GestorTrabajoVisual methodsFor: 'as yet unclassified' stamp: 'Malena 12/23/2022 12:10'!ejecutarRevalidarSolicitud|nroEmpresaElegida empresaElegida nroSolicitudElegida solicitudElegida unaFechaDia unaFechaMes unaFechaAño nuevaFecha|nroEmpresaElegida:= UIManager default chooseFrom: (miGestor getEmpresaSolicitantesConNombre) message:'Primero debe elegir la empresa que contenga la solicitud a revalidar' title:'REVALIDAR SOLICITUD'.empresaElegida:= (miGestor getEmpresaSolicitantes)at: nroEmpresaElegida.((empresaElegida getColSolicitudesNoVigentesConDescripcion)at:1) ifNotNil:[nroSolicitudElegida := UIManager default chooseFrom: (empresaElegida getColSolicitudesNoVigentesConDescripcion) message:'Eliga la Solicitud a Revalidar'  title: 'REVALIDAR SOLICITUD'. solicitudElegida:= (empresaElegida getColSolicitudes)at: nroSolicitudElegida."Ahora se ingresa la fecha nueva"unaFechaDia:= UIManager default request: 'Por favor, ingrese el nuevo dia' initialAnswer: '1'  title: 'REVALIDAR SOLICITUD'.unaFechaMes:= UIManager default request: 'Por favor, ingrese el nuevo digito del mes'initialAnswer: '1'  title: 'REVALIDAR SOLICITUD'.unaFechaAño:= UIManager default request: 'Por favor, ingrese el nuevo año' initialAnswer: '2000'  title: 'REVALIDAR SOLICITUD'.nuevaFecha:= Date newDay: (unaFechaDia asInteger) month:(unaFechaMes asInteger)  year:(unaFechaAño asInteger).solicitudElegida revalidarSolicitud: nuevaFecha.self mostrarDatosSolicitudRevalidada:solicitudElegida deLaEmpresa:empresaElegida. ] ifNil: [ UIManager default abort: 'La empresa no tiene Solicitudes a Revalidar' ].! !!GestorTrabajoVisual methodsFor: 'as yet unclassified' stamp: 'Malena 12/22/2022 14:24'!ejecutarSolPendientesEmpresa|nroEmpresa empresa|nroEmpresa := UIManager default chooseFrom:(miGestor getEmpresaSolicitantesConNombre)  message: 'Eliga la empresa de donde quiere obtener las solicitudes Pendientes' title:'OBTENER SOLICITUDES PENDIENTES DE UNA EMPRESA'.empresa:= ((miGestor getEmpresaSolicitantes)at: nroEmpresa).self mostrarSolicitudesPendientes:(empresa). ! !!GestorTrabajoVisual methodsFor: 'as yet unclassified'!ejecutarAceptarPropuestas|infoPropuestas fuenteRef contenido|miGestor aceptarPropuestas.infoPropuestas:= miGestor mostrarPropuestasAceptadas.fuenteRef:= (TextFontReference toFont: (StrikeFont familyName: 'Atlanta' size: 12)).contenido:= infoPropuestas asText addAttribute: fuenteRef.(tm2 contents: (contenido )).tm2  color: Color black.tm2  backgroundColor: ((Color lightYellow)slightlyLighter).tm2  borderColor: Color black.tm2   wrapFlag: true.tm2 width: 0.tm1 contents: 'PROPUESTAS ACEPTADAS' .tm1 color: Color black.tm2 wrapFlag: true.tm2 width: 400.! !!GestorTrabajoVisual methodsFor: 'as yet unclassified' stamp: 'Malena 12/22/2022 14:38'!ejecutarSolAtendidas|info fuenteRef contenido|info:= miGestor getColAtentidas.fuenteRef:= (TextFontReference toFont: (StrikeFont familyName: 'Atlanta' size: 12)).contenido:=  info asText addAttribute: fuenteRef.(tm2 contents: (contenido )).tm2  color: Color black.tm2  backgroundColor: ((Color lightYellow)slightlyLighter).tm2  borderColor: Color black.tm2   wrapFlag: true.tm2 width: 0.tm1 contents: 'SOLICITUDES ATENDIDAS' .tm1 color: Color black.tm2 wrapFlag: true.tm2 width: 400.! !!GestorTrabajoVisual methodsFor: 'as yet unclassified' stamp: 'Malena 12/22/2022 14:56'!mostrarSolicitudesPendientes:empresa|info fuenteRef contenido|info:= empresa getSolicitudesPendientesConNombre.fuenteRef:= (TextFontReference toFont: (StrikeFont familyName: 'Atlanta' size: 12)).(info isEmptyOrNil) ifTrue:[contenido:='LA EMPRESA NO TIENE SOLICITUDES PENDIENTES'] ifFalse: [contenido:= info asText addAttribute: fuenteRef].(tm2 contents: (contenido )).tm2  color: Color black.tm2  backgroundColor: ((Color lightYellow)slightlyLighter).tm2  borderColor: Color black.tm2   wrapFlag: true.tm2 width: 0.tm1 contents: 'SOLICITUDES PENDIENTE DE LA EMPRESA ELEGIDA' .tm1 color: Color black.tm2 wrapFlag: true.tm2 width: 400.! !!GestorTrabajoVisual methodsFor: 'as yet unclassified' stamp: 'Malena 12/27/2022 01:55'!mostrarSolicitudesSegunFecha: fechita|infoPostulantes fuenteRef contenido|infoPostulantes:= miGestor verSolFecha:fechita.fuenteRef:= (TextFontReference toFont: (StrikeFont familyName: 'Atlanta' size: 12)).(infoPostulantes isEmpty) ifTrue:[contenido:='NO hay solicitudes pendientes hechas en esa fecha'] ifFalse: [contenido:= infoPostulantes asText addAttribute: fuenteRef].(tm2 contents: (contenido )).tm2  color: Color black.tm2  backgroundColor: ((Color lightYellow)slightlyLighter).tm2  borderColor: Color black.tm2   wrapFlag: true.tm2 width: 0.tm1 contents: 'SOLICITUDES PENDIENTES HECHAS EN TAL FECHA' .tm1 color: Color black.tm2 wrapFlag: true.tm2 width: 400.! !!GestorTrabajoVisual methodsFor: 'as yet unclassified'!mostrarDatosSolicitudRevalidada:solicitudElegida deLaEmpresa:empresaElegida|info fuenteRef contenido|info:= solicitudElegida obtenerDatosSolicitud.info:= info, 'De la Empresa: ',empresaElegida getNombre.fuenteRef:= (TextFontReference toFont: (StrikeFont familyName: 'Atlanta' size: 12)).contenido:=  info asText addAttribute: fuenteRef.(tm2 contents: (contenido )).tm2  color: Color black.tm2  backgroundColor: ((Color lightYellow)slightlyLighter).tm2  borderColor: Color black.tm2   wrapFlag: true.tm2 width: 0.tm1 contents: 'SOLICITUD REVALIDADA' .tm1 color: Color black.tm2 wrapFlag: true.tm2 width: 400.! !!GestorTrabajoVisual methodsFor: 'as yet unclassified' stamp: 'Malena 12/15/2022 02:23'!ejecutarCargarEmpSolEn|rubro tipo puntos infoV nombre emp fueCombinada|rubro:= UIManager default   request: 'INGRESE EL RUBRO DE LA EMPRESA'initialAnswer: 'Un Rubro'  title: 'Crear una Empresa Solicitante'.puntos:= UIManager default request: 'INGRESE LOS PUNTOS DE TRABAJO QUE TENGA LA EMPRESA'initialAnswer: '2'  title: 'Crear una Empresa Solicitante'.(fueCombinada:= UIManager confirm: '¿La empresa será Combinada?') ifTrue: [infoV:= UIManager default request: 'Ingrese que vende la empresa' initialAnswer: 'Una info'  title: 'Crear una Empresa Solicitante Combinada'.] ifFalse:[ infoV :=nil]."Si no es combinada entonces pido el tipo de empresa que sera"(fueCombinada) ifTrue: [tipo:=nil  ] ifFalse: [ tipo:= UIManager  default request: 'INGRESE EL TIPO DE EMPRESA' initialAnswer: 'Uniforme / Puntuales' title: 'Crear una Empresa Solicitante' ].nombre:= UIManager default request: 'INGRESE EL NOMBRE DE LA EMPRESA'initialAnswer: 'Empresa de ...'  title: 'Crear una Empresa'."Creo segun si fue combinada o no"(fueCombinada) ifTrue: [ emp:= Combinada crearRubro: rubro Tipo:nil  Puntos:puntos infoVenta:  infoV yNombre: nombre ] ifFalse: [ emp:= EmpresaSolicitante crearRubro: rubro  Tipo: tipo  Puntos:  puntos infoVenta: nil yNombre: nombre ].miGestor agregarEmpresaSolicitante: emp.self mostrarEmpresasSolicitantes.! !!GestorTrabajoVisual methodsFor: 'as yet unclassified' stamp: 'Malena 12/27/2022 01:21'!initialize|valor|super initialize.self color: Color  lightOrange .self position: 45@45.self bounds: (self position extent: 800 @650).origen := self innerBounds origin.miGestor:=  GestorTrabajo crearGestorTrabajo.tm1:= TextMorph new.tm2:= TextMorph new.text:= AlignmentMorph newColumn.text color: (Color lightOrange).text  hResizing: #shrinkWrap; vResizing: #shrinkWrap.text position: (origen + (380@110)).text addMorphBack:tm2 .text  addMorph: tm1.text addMorphBack: tm2.self addMorph: text."Creo los botones, si es que me deja..."botonCerrar := BotonAccion new.botonIniciarDia := BotonAccion new.botonAgregarPostulantePersona:= BotonAccion new.botonAgregarPostulanteEmpresa := BotonAccion new.botonGenerarPropuestas  := BotonAccion new.botonAceptarPropuestas:= BotonAccion new.botonCargarEmpresaSolicitante  := BotonAccion new.botonObtSolFecha:= BotonAccion new.botonVerificarFraude:= BotonAccion new.botonCargarSolicitud:= BotonAccion new.botonRevalidarSolicitud:= BotonAccion new.botonOrdenarPorCantResueltas:= BotonAccion new.botonSolPendientesEmpresa := BotonAccion new.botonSolAtendidas := BotonAccion new.botonCerrar color: Color red. valor := TextMorph new.valor color: Color black.valor backgroundColor: (Color lightOrange)muchLighter.valor borderColor: valor backgroundColor muchDarker.valor position: (origen + (300@25)).valor margins: 50@20.valor centered.(valor contents: 'TRABAJO.AR')asTextMorph changeEmphasis:#bold.self addMorph: botonCerrar.self addMorph: botonIniciarDia.self addMorph: valor.self addMorph: botonAgregarPostulantePersona.self addMorph: botonAgregarPostulanteEmpresa.self addMorph: botonGenerarPropuestas.self addMorph: botonAceptarPropuestas.self addMorph: botonCargarEmpresaSolicitante .self addMorph: botonObtSolFecha.self addMorph: botonVerificarFraude.self addMorph: botonRevalidarSolicitud.self addMorph: botonCargarSolicitud.self addMorph: botonSolPendientesEmpresa.self addMorph: botonOrdenarPorCantResueltas.self addMorph: botonSolAtendidas.botonCerrar  position: (origen + (740@0)).botonIniciarDia  position: botonCerrar  position + (-720@120).botonAgregarPostulantePersona  position: botonIniciarDia  position  + (0@40).botonAgregarPostulanteEmpresa position: botonAgregarPostulantePersona position + (0@40).botonCargarEmpresaSolicitante position: botonAgregarPostulanteEmpresa position  + (0@40).botonCargarSolicitud position: botonCargarEmpresaSolicitante  position + (0@40).botonObtSolFecha position: botonCargarSolicitud   position + (0@40).botonVerificarFraude position: botonObtSolFecha position + (0@40).botonGenerarPropuestas position: botonVerificarFraude position +(0@40).botonAceptarPropuestas position: botonGenerarPropuestas position+(0@40).botonRevalidarSolicitud position: botonAceptarPropuestas  position+(0@40).botonSolPendientesEmpresa position:  botonRevalidarSolicitud position+(0@40).botonSolAtendidas position: botonSolPendientesEmpresa position+(0@40).botonOrdenarPorCantResueltas position: botonSolAtendidas position+(0@40).botonCerrar  label:'Cerrar'.botonIniciarDia  label: 'INICIAR DIA: ', Date today printString  . botonAgregarPostulantePersona  label: 'Agregar Postulante Persona'.botonAgregarPostulanteEmpresa label: 'Agregar Postulante Empresa'.botonCargarEmpresaSolicitante  label: 'Agregar Empresa Solicitante'.botonVerificarFraude label: 'Verificar Fraudes'.botonObtSolFecha label: 'Obtener Sol. Pendientes dada tal fecha'.botonGenerarPropuestas label: 'Generar Propuestas'.botonAceptarPropuestas label: 'Aceptar Propuestas'.botonRevalidarSolicitud label: 'Revalidar una Solicitud'.botonCargarSolicitud label:'Agregar Solicitud'.botonSolAtendidas label:'Obtener Solicitudes Atendidas'.botonOrdenarPorCantResueltas label:'Ordenar las Empresas por Cant de Solicitudes Atendidas'.botonSolPendientesEmpresa label:'Obtener las Solicitudes Pendientes de una empresa'.miGestor  addDependent: self.botonCerrar mouseAction: [self delete. ].botonIniciarDia  mouseAction: [self ejecutarIniciarDiaEn.].botonAgregarPostulanteEmpresa mouseAction: [ self ejecutarAgregarPosEmpresaEn. ].botonAgregarPostulantePersona mouseAction: [ self ejecutarAgregarPosPersonaEn  ].botonCargarEmpresaSolicitante mouseAction: [self ejecutarCargarEmpSolEn].botonObtSolFecha mouseAction: [self ejecutarObtSolFechaEn.].botonVerificarFraude mouseAction: [self mostrarEmpresasEnFraude.].botonGenerarPropuestas mouseAction: [ self mostrarGenerarPropuestas. ].botonAceptarPropuestas mouseAction: [ self ejecutarAceptarPropuestas.].botonCargarSolicitud mouseAction: [ self ejecutarAgregarSolicitud.].botonRevalidarSolicitud mouseAction: [ self ejecutarRevalidarSolicitud ].botonSolPendientesEmpresa mouseAction: [ self ejecutarSolPendientesEmpresa. ].botonOrdenarPorCantResueltas mouseAction: [ self mostrarOrdenarEmpresasSolicitudes ].botonSolAtendidas mouseAction: [ self ejecutarSolAtendidas ].! !!GestorTrabajoVisual methodsFor: 'as yet unclassified' stamp: 'Malena 12/15/2022 00:51'!ejecutarAgregarPosPersonaEn|nombre aptitudess pos aptitudesPersona booleanoSignificativo|aptitudesPersona:= OrderedCollection new .booleanoSignificativo:= true.nombre:= UIManager default request: 'INGRESE EL NOMBRE DE LA PERSONA' initialAnswer: 'Un Nombre' title: 'Crear Postulante Persona'.(aptitudess := UIManager default request: 'INGRESE APTITUD QUE TENGA LA PERSONA' initialAnswer: 'Ej: Mecanica Informatica ..' title: 'Crear Postulante Persona').aptitudesPersona add: (aptitudess).[UIManager confirm: '¿Quiere cargar otra Aptitud?'] whileTrue: [  (aptitudess := UIManager default request: 'INGRESE APTITUD QUE TENGA LA PERSONA' initialAnswer: 'Ej: Mecanica Informatica ..' title: 'Crear Postulante Persona'). aptitudesPersona add: (aptitudess)].pos:= Persona crearNombre: nombre yAptitudes: aptitudesPersona .miGestor agregarPostulante: pos.self mostrarInfoPostulantes.! !Object subclass: #Postulante	instanceVariableNames: 'nombre'	classVariableNames: ''	package: 'tp final 2021'!!Postulante methodsFor: 'as yet unclassified' stamp: 'Malena 12/12/2022 20:00'!obtenerDatosPostulante^SubclassResponsibility.! !!Postulante methodsFor: 'as yet unclassified' stamp: 'malenarivera 3/10/2022 02:31'!inicializarNombre: unNombrenombre:= unNombre! !!Postulante methodsFor: 'as yet unclassified' stamp: 'malenarivera 3/10/2022 02:31'!getNombre^nombre.! !!Postulante methodsFor: 'as yet unclassified' stamp: 'Modificadoras 7/2/2021 17:41'!verificarMonto:unaSolicitud^ SubclassResponsibility.! !!Postulante methodsFor: 'accessing' stamp: 'Malena 12/8/2022 17:46'!verificarPostulante: unaSol^SubclassResponsibility.! !!Postulante methodsFor: 'accessing' stamp: 'Malena 12/8/2022 17:47'!verificarPostulanteFraude: unaEmpresaSol^SubclassResponsibility.! !Postulante subclass: #Empresa	instanceVariableNames: 'rubro puntosTrabajo tipoEmpresa'	classVariableNames: 'rango'	package: 'tp final 2021'!!Empresa methodsFor: 'as yet unclassified' stamp: 'Malena 12/16/2022 18:53'!obtenerDatosPostulante|datos|datos := 'NOMBRE: ',nombre ,'<n>' expandMacros.datos := datos, 'PUNTOS:  ',puntosTrabajo asString, '<n>' expandMacros.datos := datos, 'RUBRO:  ',rubro,'<n>' expandMacros.(tipoEmpresa) ifNil: [datos := datos, 'TIPO EMP:  ',tipoEmpresa, '<n>' expandMacros].  ^datos.! !!Empresa methodsFor: 'as yet unclassified' stamp: 'Malena 12/15/2022 01:34'!inicializarPostulanteEmpresa: unru Tipo: unTip Puntos:unPunto yNombre:unNombreself inicializarNombre: unNombre.rubro := unru. tipoEmpresa:= unTip.puntosTrabajo:= unPunto. ! !!Empresa methodsFor: 'accessing' stamp: 'malenarivera 2/28/2022 03:26'!getTipoEmpresa	^ tipoEmpresa! !!Empresa methodsFor: 'accessing' stamp: 'Malena 12/8/2022 16:11'!verificarEmpresa:unaDescripcion^(rubro==unaDescripcion).! !!Empresa methodsFor: 'accessing' stamp: 'malenarivera 2/28/2022 03:23'!getPuntosTrabajo	^ puntosTrabajo! !!Empresa methodsFor: 'accessing' stamp: 'Malena 12/23/2022 00:41'!verificarPostulante:unaSolicitud|apto|apto:= false.((unaSolicitud esTrabajo) ifFalse: [(self verificarEmpresa: (unaSolicitud getDescripcion)) ifTrue: [(self class verificarRango: (unaSolicitud getMonto) yPuntos:(puntosTrabajo)) ifTrue: [apto:=true]]]).^apto.! !!Empresa methodsFor: 'accessing' stamp: 'Malena 12/7/2022 17:35'!getRubro	^ rubro .! !!Empresa methodsFor: 'accessing' stamp: 'malenarivera 2/28/2022 03:23'!setPuntosTrabajo: anObject	puntosTrabajo := anObject! !!Empresa methodsFor: 'accessing' stamp: 'Malena 12/8/2022 17:45'!verificarPostulanteFraude:unaEmpresaSol^self==unaEmpresaSol.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Empresa class	instanceVariableNames: ''!!Empresa class methodsFor: 'as yet unclassified' stamp: 'Modificadoras 7/3/2021 01:39'!getRango^rango.! !!Empresa class methodsFor: 'as yet unclassified' stamp: 'Malena 12/11/2022 16:16'!verificarRango:unMonto yPuntos: puntos^(puntos*rango)>=unMonto.! !!Empresa class methodsFor: 'as yet unclassified' stamp: 'Malena 12/15/2022 01:31'!crearRubro: unru Tipo: unTip Puntos: unPunto infoVenta: unaInf yNombre: unNombre|posEmpresa|posEmpresa := self new.rango:= 40.posEmpresa inicializarPostulanteEmpresa: unru Tipo: unTip Puntos:unPunto yNombre:unNombre.^posEmpresa.! !Empresa subclass: #EmpresaSolicitante	instanceVariableNames: 'colSolicitudes'	classVariableNames: ''	package: 'tp final 2021'!!EmpresaSolicitante methodsFor: 'as yet unclassified' stamp: 'Malena 12/23/2022 12:07'!getColSolicitudesNoVigentesConDescripcion^colSolicitudes collect: [:unaSol| (unaSol getEstaVigente) ifFalse: [ unaSol getDescripcion]].! !!EmpresaSolicitante methodsFor: 'as yet unclassified' stamp: 'Malena 12/22/2022 14:48'!getSolicitudesPendientes^colSolicitudes select:[:unaSol| unaSol getEstaVigente].! !!EmpresaSolicitante methodsFor: 'as yet unclassified' stamp: 'Malena 12/15/2022 01:44'!inicializarEmpresaSolicitanteRubro: unru Tipo: unTip Puntos: unPunto Nombre: unNombre."Usa el inicializar de empresa"self inicializarPostulanteEmpresa: unru  Tipo: unTip   Puntos: unPunto yNombre: unNombre . colSolicitudes:= OrderedCollection new.! !!EmpresaSolicitante methodsFor: 'as yet unclassified' stamp: 'Malena 12/27/2022 01:16'!colPendientesFecha: unaFecha|colP|colP:= OrderedCollection new.colSolicitudes do: [ :unaSol | (unaSol getEstaVigente) ifTrue: [(unaSol verificarFecha:unaFecha) ifTrue: [colP add: unaSol]]].^colP.! !!EmpresaSolicitante methodsFor: 'as yet unclassified' stamp: 'Malena 12/15/2022 02:18'!obtenerDatosEmpresaSol|datos|datos := 'NOMBRE: ',nombre ,'<n>' expandMacros.datos := datos, 'PUNTOS:  ',puntosTrabajo asString, '<n>' expandMacros.datos := datos, 'RUBRO:  ',rubro,'<n>' expandMacros.(tipoEmpresa isNil) ifFalse: [ datos:= datos, 'TIPO EMP: ',tipoEmpresa,'<n>' expandMacros. ].^datos.! !!EmpresaSolicitante methodsFor: 'as yet unclassified'!getColSolicitudesConDescripcion^colSolicitudes collect: [ :unaS| unaS getDescripcion].! !!EmpresaSolicitante methodsFor: 'as yet unclassified' stamp: 'malenarivera 3/9/2022 19:06'!agregarSolicitud: unaSolcolSolicitudes add: unaSol.self changed.! !!EmpresaSolicitante methodsFor: 'as yet unclassified' stamp: 'Malena 12/23/2022 11:40'!actualizarVigenciacolSolicitudes do:[:unaSolicitud| ((unaSolicitud getFechaVal)<Date today) ifTrue: [unaSolicitud setEstaVigente]].! !!EmpresaSolicitante methodsFor: 'accessing' stamp: 'malenarivera 3/1/2022 01:37'!getColSolicitudes	^ colSolicitudes! !!EmpresaSolicitante methodsFor: 'accessing' stamp: 'Malena 12/23/2022 11:55'!getSolicitudesPendientesConNombre|colAMostrar pos aux|colAMostrar:= colSolicitudes select:[:unaSol| unaSol getEstaVigente].pos:=''.aux:=1.colAMostrar do: [ :unaSol | 	pos := pos,'Solicitud Pendiente ', aux asString, '<n>' expandMacros.	aux := aux+1.	pos := pos, (unaSol  obtenerDatosSolicitud), '<n>'expandMacros].^pos.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!EmpresaSolicitante class	instanceVariableNames: 'colSolicitudes'!!EmpresaSolicitante class methodsFor: 'as yet unclassified' stamp: 'Malena 12/15/2022 01:35'!crearRubro: unru Tipo: unTip Puntos: unPunto infoVenta: unaInf yNombre: unNombre|empSol|empSol:= self new.empSol inicializarEmpresaSolicitanteRubro: unru Tipo: unTip Puntos: unPunto Nombre: unNombre.^empSol.! !EmpresaSolicitante subclass: #Combinada	instanceVariableNames: 'infoVenta'	classVariableNames: ''	package: 'tp final 2021'!!Combinada methodsFor: 'as yet unclassified' stamp: 'Malena 12/15/2022 01:44'!inicializarEmpresaCombinadaNombre: unNombre Rubro:unRubro infoVenta: unaInfo Puntos:unosPuntos"Usa el inicializar de empresa"super inicializarEmpresaSolicitanteRubro: unRubro Tipo:nil  Puntos: unosPuntos Nombre: unNombre .infoVenta:= unaInfo.! !!Combinada methodsFor: 'as yet unclassified' stamp: 'Malena 12/27/2022 01:41'!getInfoVenta^infoVenta.! !!Combinada methodsFor: 'as yet unclassified' stamp: 'Malena 12/15/2022 02:04'!obtenerDatosEmpresaSol|datos|datos:= super obtenerDatosEmpresaSol.datos:= datos, 'INFO VENTA:  ',infoVenta,'<n>' expandMacros.^datos.! !!Combinada methodsFor: 'as yet unclassified' stamp: 'Malena 12/17/2022 15:58'!verificarEmpresa:unaDescripcion^((infoVenta==unaDescripcion)&(rubro==unaDescripcion)).! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Combinada class	instanceVariableNames: ''!!Combinada class methodsFor: 'as yet unclassified' stamp: 'Malena 12/15/2022 01:39'!crearRubro: unru Tipo: unTip Puntos: unPunto infoVenta: unaInf yNombre: unNombre|empCombinada|empCombinada := self new.empCombinada inicializarEmpresaCombinadaNombre: unNombre Rubro:unru infoVenta: unaInf Puntos:unPunto.^empCombinada.! !Postulante subclass: #Persona	instanceVariableNames: 'colAptitudes'	classVariableNames: 'precioMax'	package: 'tp final 2021'!!Persona methodsFor: 'as yet unclassified' stamp: 'malenarivera 3/10/2022 02:30'!inicializarPostulantePersonaNombre: unNom yAptitudes: unaColself inicializarNombre: unNom.colAptitudes := unaCol.! !!Persona methodsFor: 'as yet unclassified' stamp: 'Malena 12/27/2022 01:38'!obtenerDatosPostulante|datos postu|postu:= ''.colAptitudes do: [ :unaApt | postu:= postu, ' ', (unaApt asString), ',' ].datos := 'NOMBRE: ',nombre,'<n>' expandMacros.datos := datos, 'APTITUDES:  ', postu,'<n>' expandMacros.  ^datos.! !!Persona methodsFor: 'as yet unclassified' stamp: 'malenarivera 2/28/2022 03:40'!getAptitud^colAptitudes .! !!Persona methodsFor: 'as yet unclassified' stamp: 'Malena 12/11/2022 15:50'!verificarPostulanteFraude:unaEmpresaSol^false.! !!Persona methodsFor: 'accessing' stamp: 'Malena 12/23/2022 00:42'!verificarPostulante:unaSolicitud^((colAptitudes includes: (unaSolicitud getDescripcion)) ifTrue: [(unaSolicitud esTrabajo) ifFalse: [(self class verificarMonto: (unaSolicitud getMonto)) ifTrue: [true] ] ifTrue: [true]] ifFalse: [false]).! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Persona class	instanceVariableNames: ''!!Persona class methodsFor: 'as yet unclassified' stamp: 'Malena 12/12/2022 20:42'!crearNombre: unNom yAptitudes: unaCol|persona|persona:= self new.precioMax:= 200.persona inicializarPostulantePersonaNombre: unNom yAptitudes: (unaCol asOrderedCollection) .^persona.! !!Persona class methodsFor: 'as yet unclassified' stamp: 'Malena 12/9/2022 03:30'!verificarMonto: unMonto^(Persona getPrecioMax>=unMonto).! !!Persona class methodsFor: 'as yet unclassified' stamp: 'Modificadoras 7/3/2021 01:41'!getPrecioMax^precioMax.! !Object subclass: #Propuesta	instanceVariableNames: 'solicitud postulante esInvalida'	classVariableNames: ''	package: 'tp final 2021'!!Propuesta methodsFor: 'as yet unclassified' stamp: 'Malena 12/22/2022 16:00'!buscarSolicitud:idSolicitud EmpresaSol: unaEmpresaSol^((solicitud verificarId: (idSolicitud)) ifTrue: [(postulante) ifNotNil:[postulante verificarPostulanteFraude: unaEmpresaSol]ifNil:[false]] ifFalse: [false]).! !!Propuesta methodsFor: 'as yet unclassified' stamp: 'Malena 12/22/2022 14:46'!obtenerDatosPropuesta|datos|datos := 'Solicitud Asociada: ', (solicitud getId)  asString,'<n>' expandMacros.(postulante) ifNotNil: [ datos:= datos, 'Postulante Asociado: ', (postulante getNombre), '<n>' expandMacros].^datos.! !!Propuesta methodsFor: 'as yet unclassified' stamp: 'Malena 12/16/2022 19:04'!getPostulante^postulante.! !!Propuesta methodsFor: 'as yet unclassified' stamp: 'Malena 12/15/2022 11:03'!getEsInvalida^esInvalida.! !!Propuesta methodsFor: 'as yet unclassified' stamp: 'malenarivera 2/28/2022 03:41'!inicializarPropuestaConPostulante: unPos ySolicitud: unaSol.postulante:= unPos.solicitud := unaSol.esInvalida:= false.! !!Propuesta methodsFor: 'as yet unclassified' stamp: 'Malena 12/7/2022 18:56'!setPostulante: unPospostulante := unPos.! !!Propuesta methodsFor: 'as yet unclassified' stamp: 'Malena 12/9/2022 03:57'!inicializarPropuestaConSolicitud: unaSol.solicitud := unaSol.esInvalida:= false.postulante:= nil.! !!Propuesta methodsFor: 'as yet unclassified' stamp: 'Malena 12/8/2022 17:10'!getSolicitud^solicitud.! !!Propuesta methodsFor: 'initialization' stamp: 'malenarivera 2/28/2022 03:27'!setEsInvalida: loEsesInvalida:= loEs.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Propuesta class	instanceVariableNames: ''!!Propuesta class methodsFor: 'as yet unclassified' stamp: 'malenarivera 2/28/2022 03:07'!crearPropuestaConPostulante: unPos YSolicitud: unaSol|propuesta|propuesta:= self new.propuesta inicializarPropuestaConPostulante: unPos ySolicitud: unaSol.^propuesta. ! !!Propuesta class methodsFor: 'as yet unclassified' stamp: 'Malena 12/7/2022 18:55'!crearPropuestaConSolicitud: unaSol|propuesta|propuesta:= self new.propuesta inicializarPropuestaConSolicitud: unaSol.^propuesta. ! !Object subclass: #Solicitud	instanceVariableNames: 'id descripcion estaVigente fechaVal fechaEmision'	classVariableNames: ''	package: 'tp final 2021'!!Solicitud methodsFor: 'initialization' stamp: 'Malena 12/22/2022 14:59'!setFechaEmision: unaFechafechaEmision:= unaFecha.! !!Solicitud methodsFor: 'as yet unclassified' stamp: 'Malena 12/11/2022 20:13'!verificarId: unId^id==unId.! !!Solicitud methodsFor: 'as yet unclassified' stamp: 'Malena 12/11/2022 20:11'!verificar: unaEmpSol yColPropuestas: unaCol^(unaCol anySatisfy: [ :unaP | unaP buscarSolicitud: (id) EmpresaSol: (unaEmpSol)]).! !!Solicitud methodsFor: 'as yet unclassified' stamp: 'Malena 12/12/2022 17:08'!verificarFecha:aDate^aDate equals: fechaEmision.! !!Solicitud methodsFor: 'as yet unclassified' stamp: 'Modificadoras 7/3/2021 01:34'!esTrabajo^false.! !!Solicitud methodsFor: 'as yet unclassified' stamp: 'Malena 12/7/2022 18:06'!inicializarSolicitudDescripcion: unaDes nroId: unId yFechaVal: unaFechadescripcion:= unaDes.fechaEmision := Date today.fechaVal:= unaFecha.estaVigente:= true.id:= unId.! !!Solicitud methodsFor: 'as yet unclassified' stamp: 'Malena 12/23/2022 11:55'!revalidarSolicitud: unaFechafechaVal:=unaFecha.estaVigente:=true.! !!Solicitud methodsFor: 'as yet unclassified' stamp: 'Malena 12/15/2022 03:01'!obtenerDatosSolicitud|datos|datos := 'Id: ',id asString,'<n>' expandMacros.datos:= datos, 'Descripcion: ', descripcion ,'<n>' expandMacros.datos:= datos, 'esta vigente?: ', estaVigente asString, '<n>' expandMacros.datos:= datos, 'Fecha Emision: ',fechaEmision asDate printString , '<n>' expandMacros.datos:= datos, 'Fecha Validacion: ', fechaVal asDate printString , '<n>' expandMacros.^datos.! !!Solicitud methodsFor: 'as yet unclassified' stamp: 'Modificadoras 7/3/2021 01:33'!getMonto ^SubclassResponsibility.! !!Solicitud methodsFor: 'accessing' stamp: 'Malena 12/7/2022 18:00'!getDescripcion	^ descripcion! !!Solicitud methodsFor: 'accessing' stamp: 'malenarivera 2/28/2022 03:20'!fechaEmision	^ fechaEmision! !!Solicitud methodsFor: 'accessing' stamp: 'Malena 12/8/2022 19:38'!setEstaVigente	estaVigente := false.! !!Solicitud methodsFor: 'accessing' stamp: 'Malena 12/7/2022 18:03'!getId	^ id! !!Solicitud methodsFor: 'accessing' stamp: 'Malena 12/7/2022 18:01'!getEstaVigente	^ estaVigente! !!Solicitud methodsFor: 'accessing' stamp: 'Malena 12/7/2022 18:01'!getFechaEmision	^ fechaEmision! !!Solicitud methodsFor: 'accessing' stamp: 'Malena 12/7/2022 18:02'!getFechaVal	^ fechaVal! !!Solicitud methodsFor: 'accessing' stamp: 'Malena 12/7/2022 18:03'!setFechaVal: unaFecha	fechaVal := unaFecha.! !Solicitud subclass: #Servicio	instanceVariableNames: 'monto esPuntual'	classVariableNames: ''	package: 'tp final 2021'!!Servicio methodsFor: 'as yet unclassified' stamp: 'Modificadoras 7/3/2021 01:33'!getMonto^monto! !!Servicio methodsFor: 'as yet unclassified' stamp: 'malenarivera 3/9/2022 18:46'!inicializarSolicitudServicioDescripcion: unaDes nroId: unId yFechaVal: unaFecha Monto: montoo EsPuntual: loEsself inicializarSolicitudDescripcion: unaDes nroId: unId  yFechaVal: unaFecha.monto:=  montoo.esPuntual:= loEs.! !!Servicio methodsFor: 'as yet unclassified' stamp: 'Malena 12/22/2022 15:03'!obtenerDatosSolicitud|datos|datos:= (super obtenerDatosSolicitud).datos := datos, 'Es Puntual?: ', esPuntual asString,'<n>' expandMacros.datos := datos, 'Monto:  ', monto asString,'<n>' expandMacros.^datos.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Servicio class	instanceVariableNames: ''!!Servicio class methodsFor: 'as yet unclassified' stamp: 'Malena 12/8/2022 17:52'!crearDescripcion: unaDes nroId: unNro unMonto: montoo EsPuntual: loEs yFechaVal: unaFecha|solS|solS:= self new.solS inicializarSolicitudServicioDescripcion: unaDes  nroId: unNro  yFechaVal: unaFecha   Monto: montoo  EsPuntual: loEs.^solS. ! !Solicitud subclass: #Trabajo	instanceVariableNames: ''	classVariableNames: ''	package: 'tp final 2021'!!Trabajo methodsFor: 'as yet unclassified' stamp: 'Modificadoras 7/3/2021 01:33'!getMonto^0.! !!Trabajo methodsFor: 'as yet unclassified' stamp: 'Modificadoras 7/3/2021 01:34'!esTrabajo^true.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Trabajo class	instanceVariableNames: ''!!Trabajo class methodsFor: 'as yet unclassified' stamp: 'Malena 12/8/2022 17:52'!crearDescripcion: unaDes  NroId: unId yFechaVal: unaFecha|trabajo|trabajo:= self new.trabajo inicializarSolicitudDescripcion: unaDes nroId: unId yFechaVal: unaFecha.^ trabajo.! !